<!-- note games.html.erb layout file has extra yield in head section allowing the following 
     content_for tag to allow this page to specify extra javascript files! Way cool!

     See: http://stackoverflow.com/questions/390164/javascript-include-tag-best-practice-in-a-rails-application
          Answer 1 is above.
		  Answer 3 provides conditional via: (@extra_head_content ||= ""). Notice use of capture
-->
<!-- note: the extra JavaScript files are specified in the myScripts variable - which is set to nil. 
	 Can test by setting it to "matching", a junk value used for test, because that JavaScript file currently exists. 
	 Set myScripts to names meaningful for this view.
-->
<% myScripts = nil  %>

<% content_for(:head) do %>
<%= javascript_include_tag myScripts unless myScripts.nil?%>
<% end %>



<p id="notice"><%= notice %></p>

<p>
  A jQuery game of: <b><%= @game.name %></b>
</p>
<p>Random sequence:</p>

<div id="podium">
	<figure>
		<img src="#">  <!-- a placeholder tag to be replaced by a lineup image on page load -->
	</figure>
</div>

<div id="spacer">
</div>	

<div>
	<div class = "lineup">	
		<% @suspects.each do |suspect| %>
		<figure class="suspect">
			<%= image_tag suspect.src, {:class => "mugshot"} %>
			<%= suspect_caption(suspect) %>
		</figure>
		<% end %>
	</div>
</div>

<br clear="left" />
<div id="storehouse">
	<%= image_tag "true22x22.png",  {:class => "true"}  %>
	<%= image_tag "false22x22.png", {:class => "false"} %>
</div>

<%= link_to 'Edit', edit_game_path(@game) %> |
<%= link_to 'Back', games_path %>

<p id="console">
	<!--[<%= @ruby_array.join(",") %>] -->
</p>


<script type = "text/javascript" >
// initialize client-side javascript array to server-side ruby array
// This javascript is here because I need the active <% %> tags. When we switch
// to the Rails 3.1 Assets Pipeline, should be able to move this to a pure javascript file.

var global_seq = [<%= @ruby_array.join(", ") %>];

// create empty array to remember which images are faded and need to be restored
var faded_arr = [ ];

$(function(){

	// remove this index from the global_seq array
	// copy an image from the lineup and put it onto the podium
	cloneLineupImageToPodium(global_seq[0]);
	

 	// div (containing the image) click event handler
	$(".lineup").click(function(event){
			suspectFig = $(event.target);
			if (event.target.className == "lineup") return 0;
			if ($(event.target)[0].className != "suspect") {
				suspectFig = $(event.target).parent(".suspect")[0];
			}
		if ( global_seq[0] == $(".lineup figure").index(suspectFig)) {
			// right answer, animate a bunch of effects
			// ending with the next item to match on the podium
			animateRightAnswer(suspectFig, this);
			
		} else {
			// wrong answer, fade the chosen suspect's image				
			$("img.mugshot", suspectFig).fadeTo("slow", 0.50);
			// remember each faded target
			faded_arr = faded_arr.concat(suspectFig);
			// clone the red X and put it on the suspect, and make it visible
			$("#storehouse img.false").clone().appendTo(suspectFig);

		}
	});
	
	// set the height of the podium to keep it from collapsing after the last image is removed
	var h = $("#podium").css("height");
	$("#podium").css("height", h);
});

// pick image to put on podium
function cloneLineupImageToPodium(ix){
	// brighten image, then clone
	//$("#console").append("<br/>[cloneLineupImage] " + ix);
	$("#podium img").       replaceWith($(".lineup img.mugshot").eq(ix).css("opacity", 1).clone());
	$("#podium figcaption").remove();
	$("#podium figure").append($(".lineup figcaption" ).eq(ix).clone());
}


/*
    Create inside functions to handle the animation
    Formal arguments:
        suspectFig - the <figure> that contains the image the user clicked. Possibly, the user
                     clicked outside the image, but still the correct div. This is the div
                     that contains the image.
        lineupDiv -  The suspect images are contained in a div with class 'lineup'. Possibly, there
                     are multiple lineups for a different configuration of the board. The
                     lineupDiv is the actual div that contains the 'click' handler. That is
                     the value of the 'this' variable in the handler.
 */
function animateRightAnswer(suspectFig, lineupDiv) {

    /* -------------- animation chains -------------------
     * do animation by finishing a step before beginning the next step. See:
     * http://stackoverflow.com/questions/461912/finish-one-animation-then-start-the-other-one
     * ---------------------------------------------------------------------------------------- */
    rightStep1();

    function rightStep1() {
        //$("#console").append("<br/>[rightStep1]");
        $("img.mugshot", suspectFig).slideUp("fast", rightStep2);
    }

    function rightStep2() {
        //$("#console").append("<br/>[rightStep2]");
        $(suspectFig).remove();
        rightStep3();
    }

    function rightStep3() {
        // restore faded images 
		$("img.mugshot", faded_arr).fadeTo("fast", 1.0);
		// remove the red X (X had been marking it wrong)
		$("img.false", faded_arr).remove();

		// note the following uses the 'arguments.callee' to sequentially animate one image at a time
        var ix = 0;
        (function() {
            var el = faded_arr[ix++];
			// restore the image
			// workes, left here as example -- $("img:nth-child(1)", el).fadeTo("fast", 1.0, arguments.callee);
			// remove the marked wrong X
			// workes, left here as example -- $("img:nth-child(3)", el).fadeTo("fast", 0.0, arguments.callee);
        })();
		//$("#console").append("<br/>[rightStep3]--done");
        rightStep4();
    }

    function rightStep4() {
        //$("#console").append("<br/>[rightStep4]");
        // are there more images to match?
        if (global_seq.length > 0) {
            // chop head off sequencing array
            removed = global_seq.splice(0, 1);

            // renumber any values greater than the removed item's value
            reindex_global_seq(removed);

            // put next image on podium
            cloneLineupImageToPodium(global_seq[0]);
        } else {
            // all done, no more left. Remove item from podium
            $("#podium img").remove();
        }
    }

	// a private function to
	// remove first element [1] so:[1 0 2 3]
	// becomes:                    [0 2 3]
	// then decrement values > 1:  [0 1 2]
	function reindex_global_seq(above_here) {
		//$("#console").append("<br/>[" + global_seq + "] -- before renumber");
		for(var i = 0; i < global_seq.length; i++){
			if (global_seq[i] > above_here) {
				global_seq[i]-- ;
			}
		}
		// write modified global_seq array to console
		//$("#console").append("<br/>[" + global_seq + "]");
	}
}

</script>